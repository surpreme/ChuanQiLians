package com.mbcq.commonlibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mbcq.commonlibrary.db.WebAreaDbInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEB_AREA_DB_INFO".
*/
public class WebAreaDbInfoDao extends AbstractDao<WebAreaDbInfo, Long> {

    public static final String TABLENAME = "WEB_AREA_DB_INFO";

    /**
     * Properties of entity WebAreaDbInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, long.class, "_id", true, "_id");
        public final static Property CompanyId = new Property(1, String.class, "companyId", false, "COMPANY_ID");
        public final static Property Webid = new Property(2, String.class, "webid", false, "WEBID");
        public final static Property WebidCode = new Property(3, String.class, "webidCode", false, "WEBID_CODE");
        public final static Property WebSimplicity = new Property(4, String.class, "webSimplicity", false, "WEB_SIMPLICITY");
        public final static Property WebidType = new Property(5, String.class, "webidType", false, "WEBID_TYPE");
        public final static Property WebidTypeStr = new Property(6, String.class, "webidTypeStr", false, "WEBID_TYPE_STR");
        public final static Property ParWebCod = new Property(7, String.class, "parWebCod", false, "PAR_WEB_COD");
        public final static Property ParWebCodStr = new Property(8, String.class, "parWebCodStr", false, "PAR_WEB_COD_STR");
        public final static Property WebMb = new Property(9, String.class, "webMb", false, "WEB_MB");
        public final static Property WebTel = new Property(10, String.class, "webTel", false, "WEB_TEL");
        public final static Property Province = new Property(11, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(12, String.class, "city", false, "CITY");
        public final static Property County = new Property(13, String.class, "county", false, "COUNTY");
        public final static Property Street = new Property(14, String.class, "street", false, "STREET");
        public final static Property Address = new Property(15, String.class, "address", false, "ADDRESS");
        public final static Property Longitude = new Property(16, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(17, String.class, "latitude", false, "LATITUDE");
        public final static Property DbWebCode = new Property(18, String.class, "dbWebCode", false, "DB_WEB_CODE");
        public final static Property DbWebCodeStr = new Property(19, String.class, "dbWebCodeStr", false, "DB_WEB_CODE_STR");
        public final static Property GxWebCode = new Property(20, String.class, "gxWebCode", false, "GX_WEB_CODE");
        public final static Property GxWebCodeStr = new Property(21, String.class, "gxWebCodeStr", false, "GX_WEB_CODE_STR");
        public final static Property Xzqhbm = new Property(22, String.class, "xzqhbm", false, "XZQHBM");
        public final static Property IsValid = new Property(23, String.class, "isValid", false, "IS_VALID");
        public final static Property IsValidStr = new Property(24, String.class, "isValidStr", false, "IS_VALID_STR");
        public final static Property OpeMan = new Property(25, String.class, "opeMan", false, "OPE_MAN");
        public final static Property RecordDate = new Property(26, String.class, "recordDate", false, "RECORD_DATE");
    }


    public WebAreaDbInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WebAreaDbInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEB_AREA_DB_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: _id
                "\"COMPANY_ID\" TEXT," + // 1: companyId
                "\"WEBID\" TEXT NOT NULL ," + // 2: webid
                "\"WEBID_CODE\" TEXT UNIQUE ," + // 3: webidCode
                "\"WEB_SIMPLICITY\" TEXT," + // 4: webSimplicity
                "\"WEBID_TYPE\" TEXT," + // 5: webidType
                "\"WEBID_TYPE_STR\" TEXT," + // 6: webidTypeStr
                "\"PAR_WEB_COD\" TEXT," + // 7: parWebCod
                "\"PAR_WEB_COD_STR\" TEXT," + // 8: parWebCodStr
                "\"WEB_MB\" TEXT," + // 9: webMb
                "\"WEB_TEL\" TEXT," + // 10: webTel
                "\"PROVINCE\" TEXT," + // 11: province
                "\"CITY\" TEXT," + // 12: city
                "\"COUNTY\" TEXT," + // 13: county
                "\"STREET\" TEXT," + // 14: street
                "\"ADDRESS\" TEXT," + // 15: address
                "\"LONGITUDE\" TEXT," + // 16: longitude
                "\"LATITUDE\" TEXT," + // 17: latitude
                "\"DB_WEB_CODE\" TEXT," + // 18: dbWebCode
                "\"DB_WEB_CODE_STR\" TEXT," + // 19: dbWebCodeStr
                "\"GX_WEB_CODE\" TEXT," + // 20: gxWebCode
                "\"GX_WEB_CODE_STR\" TEXT," + // 21: gxWebCodeStr
                "\"XZQHBM\" TEXT," + // 22: xzqhbm
                "\"IS_VALID\" TEXT," + // 23: isValid
                "\"IS_VALID_STR\" TEXT," + // 24: isValidStr
                "\"OPE_MAN\" TEXT," + // 25: opeMan
                "\"RECORD_DATE\" TEXT);"); // 26: recordDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEB_AREA_DB_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WebAreaDbInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(2, companyId);
        }
        stmt.bindString(3, entity.getWebid());
 
        String webidCode = entity.getWebidCode();
        if (webidCode != null) {
            stmt.bindString(4, webidCode);
        }
 
        String webSimplicity = entity.getWebSimplicity();
        if (webSimplicity != null) {
            stmt.bindString(5, webSimplicity);
        }
 
        String webidType = entity.getWebidType();
        if (webidType != null) {
            stmt.bindString(6, webidType);
        }
 
        String webidTypeStr = entity.getWebidTypeStr();
        if (webidTypeStr != null) {
            stmt.bindString(7, webidTypeStr);
        }
 
        String parWebCod = entity.getParWebCod();
        if (parWebCod != null) {
            stmt.bindString(8, parWebCod);
        }
 
        String parWebCodStr = entity.getParWebCodStr();
        if (parWebCodStr != null) {
            stmt.bindString(9, parWebCodStr);
        }
 
        String webMb = entity.getWebMb();
        if (webMb != null) {
            stmt.bindString(10, webMb);
        }
 
        String webTel = entity.getWebTel();
        if (webTel != null) {
            stmt.bindString(11, webTel);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(12, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(13, city);
        }
 
        String county = entity.getCounty();
        if (county != null) {
            stmt.bindString(14, county);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(15, street);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(16, address);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(17, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(18, latitude);
        }
 
        String dbWebCode = entity.getDbWebCode();
        if (dbWebCode != null) {
            stmt.bindString(19, dbWebCode);
        }
 
        String dbWebCodeStr = entity.getDbWebCodeStr();
        if (dbWebCodeStr != null) {
            stmt.bindString(20, dbWebCodeStr);
        }
 
        String gxWebCode = entity.getGxWebCode();
        if (gxWebCode != null) {
            stmt.bindString(21, gxWebCode);
        }
 
        String gxWebCodeStr = entity.getGxWebCodeStr();
        if (gxWebCodeStr != null) {
            stmt.bindString(22, gxWebCodeStr);
        }
 
        String xzqhbm = entity.getXzqhbm();
        if (xzqhbm != null) {
            stmt.bindString(23, xzqhbm);
        }
 
        String isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindString(24, isValid);
        }
 
        String isValidStr = entity.getIsValidStr();
        if (isValidStr != null) {
            stmt.bindString(25, isValidStr);
        }
 
        String opeMan = entity.getOpeMan();
        if (opeMan != null) {
            stmt.bindString(26, opeMan);
        }
 
        String recordDate = entity.getRecordDate();
        if (recordDate != null) {
            stmt.bindString(27, recordDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WebAreaDbInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(2, companyId);
        }
        stmt.bindString(3, entity.getWebid());
 
        String webidCode = entity.getWebidCode();
        if (webidCode != null) {
            stmt.bindString(4, webidCode);
        }
 
        String webSimplicity = entity.getWebSimplicity();
        if (webSimplicity != null) {
            stmt.bindString(5, webSimplicity);
        }
 
        String webidType = entity.getWebidType();
        if (webidType != null) {
            stmt.bindString(6, webidType);
        }
 
        String webidTypeStr = entity.getWebidTypeStr();
        if (webidTypeStr != null) {
            stmt.bindString(7, webidTypeStr);
        }
 
        String parWebCod = entity.getParWebCod();
        if (parWebCod != null) {
            stmt.bindString(8, parWebCod);
        }
 
        String parWebCodStr = entity.getParWebCodStr();
        if (parWebCodStr != null) {
            stmt.bindString(9, parWebCodStr);
        }
 
        String webMb = entity.getWebMb();
        if (webMb != null) {
            stmt.bindString(10, webMb);
        }
 
        String webTel = entity.getWebTel();
        if (webTel != null) {
            stmt.bindString(11, webTel);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(12, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(13, city);
        }
 
        String county = entity.getCounty();
        if (county != null) {
            stmt.bindString(14, county);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(15, street);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(16, address);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(17, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(18, latitude);
        }
 
        String dbWebCode = entity.getDbWebCode();
        if (dbWebCode != null) {
            stmt.bindString(19, dbWebCode);
        }
 
        String dbWebCodeStr = entity.getDbWebCodeStr();
        if (dbWebCodeStr != null) {
            stmt.bindString(20, dbWebCodeStr);
        }
 
        String gxWebCode = entity.getGxWebCode();
        if (gxWebCode != null) {
            stmt.bindString(21, gxWebCode);
        }
 
        String gxWebCodeStr = entity.getGxWebCodeStr();
        if (gxWebCodeStr != null) {
            stmt.bindString(22, gxWebCodeStr);
        }
 
        String xzqhbm = entity.getXzqhbm();
        if (xzqhbm != null) {
            stmt.bindString(23, xzqhbm);
        }
 
        String isValid = entity.getIsValid();
        if (isValid != null) {
            stmt.bindString(24, isValid);
        }
 
        String isValidStr = entity.getIsValidStr();
        if (isValidStr != null) {
            stmt.bindString(25, isValidStr);
        }
 
        String opeMan = entity.getOpeMan();
        if (opeMan != null) {
            stmt.bindString(26, opeMan);
        }
 
        String recordDate = entity.getRecordDate();
        if (recordDate != null) {
            stmt.bindString(27, recordDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public WebAreaDbInfo readEntity(Cursor cursor, int offset) {
        WebAreaDbInfo entity = new WebAreaDbInfo( //
            cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // companyId
            cursor.getString(offset + 2), // webid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // webidCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // webSimplicity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // webidType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // webidTypeStr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // parWebCod
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // parWebCodStr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // webMb
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // webTel
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // province
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // city
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // county
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // street
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // address
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // longitude
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // latitude
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // dbWebCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // dbWebCodeStr
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // gxWebCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // gxWebCodeStr
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // xzqhbm
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // isValid
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // isValidStr
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // opeMan
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // recordDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WebAreaDbInfo entity, int offset) {
        entity.set_id(cursor.getLong(offset + 0));
        entity.setCompanyId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWebid(cursor.getString(offset + 2));
        entity.setWebidCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWebSimplicity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWebidType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWebidTypeStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParWebCod(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setParWebCodStr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWebMb(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWebTel(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProvince(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCity(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCounty(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStreet(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAddress(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLongitude(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLatitude(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDbWebCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDbWebCodeStr(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setGxWebCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setGxWebCodeStr(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setXzqhbm(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIsValid(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIsValidStr(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOpeMan(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setRecordDate(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WebAreaDbInfo entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WebAreaDbInfo entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WebAreaDbInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
